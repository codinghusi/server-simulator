<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Structure Variables

data_init(map(
    kv("component", noone)
));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset connection dropable

with (obj_connection) {
    data_init(map(
        kv("dropable", false),
        kv("dropping_instance", noone)
    ));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instance teleportation and Sprite

x = mouse_x;
y = mouse_y;

// set sprite
var component = data_get("component");
if (component) {
    var sprite = object_get_sprite(map_get(component, "object"));
    var index = map_get(component, "subimage");
    
    if (sprite &gt;= 0) {
        sprite_index = sprite;
        image_index = index;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Disappear if money is less

var component = data_get("component");

if (!scr_can_buy_component(component)) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dropping

var nearest_distance = -1;
var nearest_instance = noone;
var component = data_get(other, "component");

with (obj_connection) {
    // search for nearest connection
    data_set("dropable", false);
    var distance = point_distance(mouse_x, mouse_y, scr_connection_x(self, 0.5), scr_connection_y(self, 0.5));
    if (!nearest_instance
    ||  distance &lt; nearest_distance) {
        nearest_instance = id;
        nearest_distance = distance;
    }
    
    // check if drop is possible
    var downlink = data_get("downlink");
    var downlink_count = map_get(component, "downlink_count");
    if (downlink_count || !downlink) {
        data_set("drop_possible", true);
    } else {
        drop_possible = false;
    }
}

if (nearest_instance &amp;&amp; nearest_distance &lt; 150) {
    with (nearest_instance) {
        if (global.dropable_connection == noone || global.dropable_connection == id) {
            if (data_get("drop_possible")) {
                data_set("dropable", true);
                data_set("dropping_instance", other);
                
                if (mouse_check_button_released(mb_left) &amp;&amp; !scr_hovering_ui()) {
                    scr_create_component(component, id);
                    scr_buy_component(component);
                    data_set("dropable", false);
                }
            }
            
            global.dropable_connection = id;
        } else {
            global.dropable_connection = noone;
        }
    }
}

if (mouse_check_button_released(mb_left)) {
    with (obj_connection) {
        data_set("drop_possible", false);
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
